---
export interface Props {
  width?: string;
  height?: string;
  autoStart?: boolean;
  showControls?: boolean;
  particleCount?: number;
  particleColor?: string;
  className?: string;
}

const {
  width = "100%",
  height = "400px",
  autoStart = true,
  showControls = false,
  particleCount = 100,
  particleColor = "#8972ff",
  className = ""
} = Astro.props;

const containerId = `fibonacci-particles-${Math.random().toString(36).substr(2, 9)}`;
const canvasId = `canvas-${containerId}`;
---

<div
  class={`relative bg-white rounded-xl overflow-hidden ${className}`}
  style={`width: ${width}; height: ${height};`}
  id={containerId}
>
  <canvas class="w-full h-full block" id={canvasId}></canvas>

  {showControls && (
    <div class="absolute top-4 right-4 bg-white/90 backdrop-blur-sm rounded-lg p-3 shadow-lg z-10">
      <div class="flex gap-2">
        <button
          class="px-3 py-1 text-sm bg-[#8972ff] text-white rounded hover:bg-[#7461e6] transition-colors"
          onclick={`startAnimation('${containerId}')`}
        >
          Start
        </button>
        <button
          class="px-3 py-1 text-sm bg-gray-500 text-white rounded hover:bg-gray-600 transition-colors"
          onclick={`stopAnimation('${containerId}')`}
        >
          Stop
        </button>
        <button
          class="px-3 py-1 text-sm bg-gray-300 text-gray-700 rounded hover:bg-gray-400 transition-colors"
          onclick={`resetAnimation('${containerId}')`}
        >
          Reset
        </button>
      </div>
    </div>
  )}
</div>

<script define:vars={{ containerId, canvasId, autoStart, particleCount, particleColor }}>
  import { AnimatedParticleSystem } from "@/components/shared/logo/animatedParticleSystem.js";

  function initFibonacciParticles() {
    const canvas = document.getElementById(canvasId);
    if (!canvas) return;

    // Configuration for clean Fibonacci animation
    const config = {
      // Fibonacci arrangement
      arrangementType: 'fibonacci',
      particleCount: particleCount,
      radius: 0.7,
      particleSize: 0.05,
      particleColor: particleColor,

      // Smooth 4-stage animation
      stage1Duration: 2.5,
      stage2Duration: 2.5,
      stage3Duration: 2.5,
      stage4Duration: 2.5,
      stage1Scale: 0.4,
      stage2Scale: 0.7,
      stage3Scale: 1.0,
      stage4Scale: 1.3,
      finalScale: 1.5,
      initialScale: 0.4,
      returnDelay: 3000,
      returnDuration: 1.0,
      autoLoop: true,

      // Subtle pulse effect
      pulseEnabled: true,
      pulseMinScale: 0.98,
      pulseMaxScale: 1.02,
      pulseSpeed: 0.4,

      // Gentle rotation
      autoRotate: true,
      autoRotateSpeedY: 0.15,

      // Glass lens effect
      lensCursorEnabled: true,
      lensCursorSize: 1.2,
      lensCursorIor: 1.2,
      lensCursorThickness: 1.0,
      lensCursorTransmission: 0.95,
      lensCursorRoughness: 0.05,
      lensCursorBackground: '#ffffff',

      // Camera
      cameraPosition: [0, 0, 5],
      backgroundColor: '#ffffff',
    };

    const particleSystem = new AnimatedParticleSystem(canvas, config);

    // Store system reference
    if (!window.fibonacciSystems) {
      window.fibonacciSystems = {};
    }
    window.fibonacciSystems[containerId] = particleSystem;

    // Auto-start if enabled
    if (autoStart) {
      setTimeout(() => {
        particleSystem.startAnimation();
      }, 500);
    }

    return particleSystem;
  }

  // Global control functions
  window.startAnimation = (id) => {
    if (window.fibonacciSystems && window.fibonacciSystems[id]) {
      window.fibonacciSystems[id].startAnimation();
    }
  };

  window.stopAnimation = (id) => {
    if (window.fibonacciSystems && window.fibonacciSystems[id]) {
      window.fibonacciSystems[id].stopAnimation();
    }
  };

  window.resetAnimation = (id) => {
    if (window.fibonacciSystems && window.fibonacciSystems[id]) {
      window.fibonacciSystems[id].resetAnimation();
    }
  };

  // Initialize
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initFibonacciParticles);
  } else {
    initFibonacciParticles();
  }

  // Cleanup
  window.addEventListener("beforeunload", () => {
    if (window.fibonacciSystems && window.fibonacciSystems[containerId]) {
      window.fibonacciSystems[containerId].dispose();
      delete window.fibonacciSystems[containerId];
    }
  });
</script>

<style>
  /* Ensure canvas has proper aspect ratio */
  canvas {
    display: block;
    width: 100%;
    height: 100%;
  }
</style>