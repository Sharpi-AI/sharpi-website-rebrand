---
import OrbitSystem from "./orbit-system/index.astro";
---

<section
  id="all-in-one"
  class="relative z-0 py-12 flex flex-col items-center justify-center md:gap-8 px-4 -mb-56 md:-mb-40 overflow-x-hidden"
>
  <div class="relative z-10 flex flex-col items-center justify-center gap-5">
    <h2
      class="text-[37px] md:text-[58px] w-full max-w-[14ch] md:max-w-[24ch] text-center font-normal leading-none text-[#383838] tracking-tight"
    >
      A única ferramenta que o seu comercial precisa
    </h2>

    <p
      class="text-sm md:text-[17px] text-center leading-snug tracking-[-0.02em] max-w-[36ch] md:max-w-[60ch]"
    >
      A Sharpi centraliza sua jornada de vendas, respeita seu processo comercial
      e unifica todos os dados em uma única plataforma
    </p>
  </div>

  <div class="z-0 w-full max-w-7xl -mt-40 md:mt-0 min-h-[722px]  md:min-h-[604px]">
    <OrbitSystem />
  </div>
</section>

<script>
  const initColorTransition = () => {
    const pageContent = document.getElementById("page-content");
    const allInOneSection = document.getElementById("all-in-one");

    if (!pageContent || !allInOneSection) {
      setTimeout(initColorTransition, 100);
      return;
    }

    const interpolateColor = (
      color1: [number, number, number],
      color2: [number, number, number],
      factor: number
    ): string => {
      const clampedFactor = Math.max(0, Math.min(1, factor));
      const result = color1.map((channel, i) =>
        Math.round(channel + clampedFactor * (color2[i] - channel))
      );
      return `rgb(${result[0]}, ${result[1]}, ${result[2]})`;
    };

    const calculateProgress = (element: HTMLElement): number => {
      const rect = element.getBoundingClientRect();
      const windowHeight = window.innerHeight;
      const elementTop = rect.top;
      const elementHeight = rect.height;

      const enterStart = windowHeight * 0.6;
      const enterEnd = windowHeight * 0.4;
      const leaveStart = -elementHeight * 0.4;
      const leaveEnd = -elementHeight * 0.6;

      if (elementTop > enterStart) {
        return -1;
      }

      if (elementTop > enterEnd) {
        return (enterStart - elementTop) / (enterStart - enterEnd);
      }

      if (elementTop > leaveStart) {
        return 1;
      }

      if (elementTop > leaveEnd) {
        return 1 + (leaveStart - elementTop) / (leaveStart - leaveEnd);
      }

      return 2.1;
    };

    const whiteColor: [number, number, number] = [255, 255, 255];
    const babyBlueColor: [number, number, number] = [204, 228, 243];

    let ticking = false;

    const updateColor = () => {
      const progress = calculateProgress(allInOneSection);

      let newColor: string;

      if (progress < 0) {
        newColor = interpolateColor(whiteColor, whiteColor, 0);
      } else if (progress <= 1) {
        newColor = interpolateColor(whiteColor, babyBlueColor, progress);
      } else if (progress <= 2) {
        newColor = interpolateColor(babyBlueColor, whiteColor, progress - 1);
      } else {
        newColor = interpolateColor(whiteColor, whiteColor, 0);
      }

      pageContent.style.backgroundColor = newColor;
      ticking = false;
    };

    const onScroll = () => {
      if (!ticking) {
        window.requestAnimationFrame(updateColor);
        ticking = true;
      }
    };

    window.addEventListener("scroll", onScroll, { passive: true });

    updateColor();
  };

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initColorTransition);
  } else {
    initColorTransition();
  }
</script>
