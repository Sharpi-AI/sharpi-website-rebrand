---
import DataSourceFunnel from "./input-funnels.astro";
import ButtonHero from "@/components/ui/button-hero/index.astro";
import DeviceSimulation from "./device-simulation.astro";

import CalendarIcon from "@/components/icons/calendar.astro";
---

<section id="hero" class="relative z-0 w-full h-screen flex overflow-hidden">
  <div
    class="relative z-10 flex items-center flex-1 flex-col pt-24 md:pt-44 gap-2"
  >
    <div
      id="hero-content"
      class="flex flex-col items-center gap-6 md:gap-2 opacity-0 translate-y-[30px]"
    >
      <ButtonHero
        title="Agende uma demo"
        href="https://wa.me/5521984401411?text=Ol%C3%A1%2C%20eu%20gostaria%20de%20saber%20mais%20sobre%20o%20sistema%20da%20Sharpi."
        class="gap-1 pl-[3px]"
        target="_blank"
      >
        <div
          class="size-6.5 rounded-full flex items-center justify-center border border-black"
        >
          <CalendarIcon />
        </div>
        Agende uma demo
      </ButtonHero>

      <h1
        class="text-[37px] md:text-[58px] max-w-[30ch] text-center text-balance font-normal leading-[0.95] md:leading-none text-[#383838] tracking-tight mb-8 md:mb-14 pointer-events-none"
      >
        Máquina de vendas com IA para Indústrias e Distribuidores
      </h1>
    </div>

    <DeviceSimulation />
  </div>

  <div
    id="hero-video-container"
    class="absolute z-0 inset-0 w-full h-full p-0 md:p-4 pointer-events-none"
  >
    <div id="hero-video-wrapper" class="w-full h-full bg-black/10 md:rounded-2xl">
      <video
        id="hero-video"
        class="w-full h-full object-cover rounded-2xl pointer-events-none"
        autoplay
        loop
        muted
        playsinline
        disablepictureinpicture
        controlslist="nodownload nofullscreen noremoteplayback"
        preload="auto"
        src="/assets/medias/index/hero/hero-bg.webm"
      >
        <source src="/assets/medias/index/hero/hero-bg.webm" type="video/webm">
        
        <source src="/assets/medias/index/hero/hero-bg.mov" type="video/quicktime">
      </video>
    </div>
  </div>

  <div
    id="hero-funnel"
    class="absolute z-10 md:z-5 inset-0 translate-y-1/3 p-4 opacity-0 pointer-events-none"
  >
    <DataSourceFunnel />
  </div>

  <div
    class="absolute z-10 bottom-0 left-0 right-0 bg-gradient-to-b from-transparent to-white h-1/4"
  >
  </div>
  <div
    id="hero-gradient"
    class="absolute z-10 bottom-0 left-0 right-0 bg-gradient-to-b from-transparent to-white h-1/4"
  >
  </div>
</section>

<script>
  import { animate } from "motion";

  function resetVideoStyles() {
    const videoContainer = document.getElementById("hero-video-container");
    const videoWrapper = document.getElementById("hero-video-wrapper");
    const video = document.getElementById("hero-video");

    if (!videoContainer || !videoWrapper || !video) return;

    if (window.innerWidth < 768) {
      // Mobile: remover estilos inline
      videoContainer.style.padding = '';
      videoWrapper.style.borderRadius = '';
      video.style.borderRadius = '';
    } else {
      // Desktop: recalcular com scroll atual
      updateHeroGradient();
    }
  }

  function updateHeroGradient() {
    const heroSection = document.querySelector("section");
    const gradient = document.getElementById("hero-gradient");
    const videoContainer = document.getElementById("hero-video-container");
    const videoWrapper = document.getElementById("hero-video-wrapper");
    const video = document.getElementById("hero-video");

    if (!heroSection || !gradient) return;

    const heroHeight = heroSection.offsetHeight;
    const scrollY = window.scrollY;

    const scrollProgress = Math.min(scrollY / (heroHeight * 0.4), 1);

    // Atualizar gradient
    const gradientHeight = 25 + scrollProgress * 75;
    const opacity = 0.3 + scrollProgress * 0.7;

    gradient.style.height = `${gradientHeight}%`;
    gradient.style.opacity = opacity.toString();

    gradient.style.background =
      "linear-gradient(to bottom, transparent, white)";

    // Animar padding e border-radius apenas em desktop
    if (videoContainer && videoWrapper && video && window.innerWidth >= 768) {
      // Padding: de 16px (p-4 = 1rem = 16px) para 0px
      const padding = 16 * (1 - scrollProgress);
      videoContainer.style.padding = `${padding}px`;

      // Border-radius: de 16px (rounded-2xl) para 0px
      const borderRadius = 16 * (1 - scrollProgress);
      videoWrapper.style.borderRadius = `${borderRadius}px`;
      video.style.borderRadius = `${borderRadius}px`;
    }
  }

  function initHeroAnimations() {
    const device = document.getElementById("hero-device");
    const funnel = document.getElementById("hero-funnel");
    const content = document.getElementById("hero-content");

    if (!device || !funnel || !content) return;

    // Animação do device e funnel juntos (delay: 0.2s)
    animate(
      [device, funnel],
      {
        opacity: [0, 1],
        y: [30, 0],
      },
      {
        duration: 0.8,
        delay: 0.2,
        ease: "easeOut",
      }
    );

    // Animação do conteúdo (título e botões) depois (delay: 0.8s)
    animate(
      content,
      {
        opacity: [0, 1],
        y: [30, 0],
      },
      {
        duration: 0.8,
        delay: 0.8,
        ease: "backOut",
      }
    );
  }

  if (window.lenis) {
    window.lenis.on("scroll", updateHeroGradient);
  } else {
    window.addEventListener("scroll", updateHeroGradient);
  }

  // Tratar resize com debounce
  let resizeTimeout: number;
  window.addEventListener('resize', () => {
    clearTimeout(resizeTimeout);
    resizeTimeout = window.setTimeout(() => {
      resetVideoStyles();
    }, 100);
  });

  updateHeroGradient();

  // Inicializar animações quando o DOM estiver pronto
  document.addEventListener("DOMContentLoaded", initHeroAnimations);
</script>
