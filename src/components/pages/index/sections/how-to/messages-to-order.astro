---
import { Image } from "astro:assets";

import PlusIcon from "@/components/icons/plus.astro";
import StartIcon from "@/components/icons/start.astro";
import DoubleCheckIcon from "@/components/icons/double-check.astro";



import PedidoPapel from "@/assets/how-to/pedido-papel.webp";
import Azeite from "@/assets/how-to/azeite.jpg";
import Maizena from "@/assets/how-to/maizena.avif";
import Sabao from "@/assets/how-to/sabao.webp";
import Manjericao from "@/assets/how-to/manjericao.webp";
import Laranja from "@/assets/how-to/laranja.webp";
---

<div class="relative w-full h-full rounded-[21px] overflow-clip" id="messages-to-order-container">
  <!-- Background -->
  <div
    class="absolute inset-0 pointer-events-none rounded-[21px]"
    aria-hidden="true"
  >
    <video class="absolute w-full h-full inset-0 object-cover rounded-[21px]" autoplay loop muted playsinline>
      <source src="/assets/medias/index/how-to/messages-bg.webm" type="video/webm">
      <source src="/assets/medias/index/how-to/messages-bg.mov" type="video/quicktime">
    </video>
  </div>

  <!-- Main Content -->
  <div class="relative w-full h-full flex flex-col md:flex-row gap-4 md:gap-20 items-center justify-between md:justify-center p-4 md:p-8">

    <!-- Left Panel: Conversa -->
    <div
      class="w-full md:w-[355px] p-2.5 pt-6 pb-2.5 flex flex-col gap-[18px] relative "
      data-animate="panel-conversa"
    >
      <!-- Header -->
      <div class="flex flex-col gap-6 w-full">
        <h3 class="font-medium text-[14px] text-[#3a3a3a] text-center tracking-[-0.28px] leading-[1.33]" data-animate="header-conversa">
          Conversa
        </h3>

        <!-- Messages -->
        <div class="flex flex-col gap-1.5 w-full">
          <!-- Message 1 -->
          <div class="opacity-0 overflow-hidden" data-animate="msg-1" style="max-height: 0;">
            <div class="bg-white border-[0.5px] border-[rgba(0,0,0,0.12)] rounded-lg px-4 py-3 flex items-center justify-between h-[40px]">
              <p class="text-[11px] text-[#343434] tracking-[-0.02em] leading-[0.9]">
                Quero fazer um pedido, por favor
              </p>
              <span class="text-[7px] text-[#747474] tracking-[0.05em] leading-[1.33] whitespace-nowrap">
                17:13
              </span>
            </div>
          </div>

          <!-- Message 2 -->
          <div class="opacity-0 overflow-hidden" data-animate="msg-2" style="max-height: 0;">
            <div class="bg-white border-[0.5px] border-[rgba(0,0,0,0.12)] rounded-lg px-4 py-3 flex items-center justify-between h-[40px] w-[268px]">
              <p class="text-[11px] text-[#343434] tracking-[-0.02em] leading-[0.9]">
                12 garrafas de azeite pra salada 
              </p>
              <span class="text-[7px] text-[#747474] tracking-[0.05em] leading-[1.33] whitespace-nowrap">
                17:14
              </span>
            </div>
          </div>

          <!-- Message 3 -->
          <div class="space-y-2  opacity-0 overflow-hidden" data-animate="msg-3" style="max-height: 0;">
            <div
              class="bg-white border-[0.5px] border-[rgba(0,0,0,0.12)] rounded-lg px-4 py-3 flex items-center justify-between h-[40px] w-[268px]"
            >
              <p class="text-[11px] text-[#343434] tracking-[-0.02em] leading-[0.9]">
                500g maizena
              </p>
              <span class="text-[7px] text-[#747474] tracking-[0.05em] leading-[1.33] whitespace-nowrap">
                17:14
              </span>
            </div>

            <!-- User info -->
            <div class="flex gap-1 items-center px-4">
              <div class="size-4 rounded-full overflow-hidden shrink-0">
                <img src="/assets/medias/index/how-to/products/avatar-user.png" alt="William" class="w-full h-full object-cover" />
              </div>
              <span class="text-[9px] text-[#3a3a3a] tracking-[-0.18px] leading-[1.33] whitespace-nowrap">
                William (Mercado União)
              </span>
              <span class="text-[9px] text-[#747474] tracking-[-0.18px] leading-[1.33]">
                1 min atrás
              </span>
            </div>
          </div>
        </div>
      </div>

      <!-- Seller response -->
      <div class="hidden md:flex flex-col items-end w-full opacity-0 overflow-hidden" data-animate="msg-seller" style="max-height: 0;">
        <div
          class="bg-[#dcf5d8] border-[0.5px] border-[rgba(0,0,0,0.12)] rounded-lg pl-4 pr-2 py-3 flex items-center justify-between h-[40px] w-[252px]"
        >
          <div class="flex gap-1 items-center">
            <span class="text-[8px] text-[#9c9c9c] tracking-[-0.16px] leading-[0.9]">
              Vendedor
            </span>
            <p class="text-[11px] text-[#343434] tracking-[-0.02em] leading-[0.9]">
              Não precisa de sabão em pó?
            </p>
          </div>
          <div class="size-6 flex items-center justify-center">
            <DoubleCheckIcon/>
          </div>
        </div>
      </div>

      <!-- Customer response -->
      <div class="flex flex-col gap-1.5 w-full">
        <div class="hidden md:block  space-y-2 opacity-0 overflow-hidden" data-animate="msg-customer-tapioca" style="max-height: 0;">
          <div
            class="bg-white border-[0.5px] border-[rgba(0,0,0,0.12)] rounded-lg px-4 py-3 flex items-center justify-between h-[40px] w-[267px]"
          >
            <p class="text-[11px] text-[#343434] tracking-[-0.02em] leading-[0.9]">
              Sim, manda 5cx daquela marca que eu peço
            </p>
            <span class="text-[7px] text-[#747474] tracking-[0.05em] leading-[1.33] whitespace-nowrap">
              17:18
            </span>
          </div>
        </div>

        <!-- Image message -->
        <div class="hidden md:flex flex-col gap-2 opacity-0 overflow-hidden" data-animate="msg-image" style="max-height: 0;">
          <div class="relative min-h-[202px] w-[220px] rounded-[22px] overflow-clip">
           
            <Image  quality={100} width={220*1.2} height={202*1.2} loading="lazy" src={PedidoPapel} alt="pedido" class="absolute inset-0 w-full h-full object-cover " />
           

            <!-- Bottom text -->
            <div class="absolute bottom-4 left-1/2 -translate-x-1/2 w-[192px] flex items-center justify-between">
              <p class="text-[10px] text-white tracking-[-0.2px] leading-[0.9] max-w-[16ch]">
                Anota esse pedido aqui também
              </p>
              <span class="text-[7px] text-[#747474] tracking-[0.05em] leading-[1.33]">
                17:19
              </span>
            </div>
          </div>

          <!-- User info -->
          <div class="flex gap-1 items-center px-4">
            <div class="size-4 rounded-full overflow-hidden shrink-0">
              <img src="/assets/medias/index/how-to/products/avatar-user.png" alt="William" class="w-full h-full object-cover" />
            </div>
            <span class="text-[9px] text-[#3a3a3a] tracking-[-0.18px] leading-[1.33] whitespace-nowrap">
              William (Mercado União)
            </span>
            <span class="text-[9px] text-[#747474] tracking-[-0.18px] leading-[1.33]">
              1 min atrás
            </span>
          </div>
        </div>
      </div>
    </div>

    <!-- Right Panel: Pedido -->
    <div
      class="w-full md:w-[355px] p-2.5 pt-6 pb-2.5 flex flex-col gap-[18px]"
      data-animate="panel-pedido"
    >
      <!-- Header with counter -->
      <div class="flex items-center justify-between w-full" data-animate="header-pedido">
        <h3 class="font-medium text-sm text-[#3a3a3a] text-center tracking-[-0.02em] leading-[1.33]">
          Pedido
        </h3>
        <div class="flex gap-[3px] items-center">
          <div class="bg-[#fbfbfb] rounded-md p-1.5 size-7 flex items-center justify-center">
            <span id="order-counter" class="text-[12px] text-black tracking-[-0.24px] leading-normal">0</span>
          </div>
          <div class="bg-[#fbfbfb] rounded-md p-1.5 size-7 flex items-center justify-center">
            <PlusIcon/>
          </div>
        </div>
      </div>

      <!-- Order items -->
      <div class="flex flex-col gap-2 w-full overflow-visible [&::-webkit-scrollbar]:hidden [-ms-overflow-style:none] [scrollbar-width:none]">
        <div class="opacity-0 overflow-visible" data-animate="item-arroz" style="max-height: 0;">
          <div class="bg-white rounded-xl p-2 flex flex-col gap-1.5">
            <div class="flex items-center justify-between border-b-[0.5px] border-[rgba(0,0,0,0.12)] pb-2">
            <div class="flex gap-2.5 items-center">
              <div class="w-[36px] h-[42px] rounded-md overflow-hidden shrink-0">
                <Image quality={75} width={36} height={42} loading="lazy" src={Azeite} alt="Azeite para Salada" class="w-full h-full object-cover" />
              </div>
              <div class="flex flex-col gap-1">
                <p class="text-[12px] text-[#232222] tracking-[-0.24px] leading-[0.9] whitespace-nowrap">
                  Azeite Extra Virgem 500ml
                </p>
                <div class="flex gap-2 text-[11px] text-[#90908e] tracking-[-0.02em] leading-[0.9]">
                  <span>12 UN</span>
                  <span>R$ 18</span>
                </div>
              </div>
            </div>
            <p class="text-[11.4px] text-[#232222] font-medium opacity-60 leading-[0.9]">R$ 216</p>
          </div>
          <div class="grid grid-cols-3 items-center justify-between" data-grid="item-arroz">
            <div class="border-[0.5px] border-[#573dff] rounded-sm size-[14px] flex items-center justify-center p-1" data-border="item-arroz">
              <span class="font-mono text-[8px] text-[#90908e] tracking-[-0.16px] leading-normal">A</span>
            </div>

            <div class="flex-1 justify-self-center flex items-center justify-center gap-1.5 px-2" data-color-transition="item-arroz">
              <StartIcon color="#573dff" size={12} class="shrink-0"/>
              <span class="font-medium text-[11px] text-[#573dff] tracking-[-0.02em] leading-[1.2] whitespace-nowrap">Azeite para salada</span>
            </div>

            <span class="justify-self-end text-[9px] text-[#573dff] tracking-[-0.18px] leading-[1.2]" data-quantity="item-arroz">× 12</span>
          </div>
          </div>
        </div>

        <div class="opacity-0 overflow-visible" data-animate="item-mussarela" style="max-height: 0;">
          <div class="bg-white rounded-xl p-2 flex flex-col gap-1.5">
            <div class="flex items-center justify-between border-b-[0.5px] border-[rgba(0,0,0,0.12)] pb-2">
            <div class="flex gap-2.5 items-center">
              <div class="w-[36px] h-[42px] rounded-md overflow-hidden shrink-0">
                <Image src={Maizena} alt="Maizena" class="w-full h-full object-cover" />
              </div>
              <div class="flex flex-col gap-1">
                <p class="text-[12px] text-[#232222] tracking-[-0.24px] leading-[0.9] whitespace-nowrap">
                  Maizena 500g
                </p>
                <div class="flex gap-2 text-[11px] text-[#90908e] tracking-[-0.02em] leading-[0.9]">
                  <span>1 UN</span>
                  <span>R$ 8,50</span>
                </div>
              </div>
            </div>
            <p class="text-[11.4px] text-[#232222] font-medium opacity-60 leading-[0.9]">R$ 8,50</p>
          </div>
          <div class="grid grid-cols-3 items-center justify-between" data-grid="item-mussarela">
            <div class="border-[0.5px] border-[#573dff] rounded-sm size-[14px] flex items-center justify-center p-1" data-border="item-mussarela">
              <span class="font-mono text-[8px] text-[#90908e] tracking-[-0.16px] leading-normal">B</span>
            </div>

            <div class="flex-1 flex justify-self-center justify-center items-center gap-1.5 px-2" data-color-transition="item-mussarela">
              <StartIcon color="#573dff" class="shrink-0" size={12}/>
              <span class="font-medium text-[11px] text-[#573dff] tracking-[-0.02em] leading-[1.2] whitespace-nowrap">maizena 500g</span>
            </div>

            <span class="justify-self-end text-[9px] text-[#573dff] tracking-[-0.18px] leading-[1.2]" data-quantity="item-mussarela">× 1</span>
          </div>
          </div>
        </div>

        <div class="hidden md:block opacity-0 overflow-visible" data-animate="item-tapioca" style="max-height: 0;">
          <div class="bg-white rounded-xl p-2 flex flex-col gap-1.5">
            <div class="flex items-center justify-between border-b-[0.5px] border-[rgba(0,0,0,0.12)] pb-2">
              <div class="flex gap-2.5 items-center">
                <div class="w-[36px] h-[42px] rounded-md overflow-hidden shrink-0">
                  <Image quality={90} width={36} height={42} loading="lazy" src={Sabao} alt="Sabão em Pó" class="w-full h-full object-cover" />
                </div>
                <div class="flex flex-col gap-1">
                  <p class="text-[12px] text-[#232222] tracking-[-0.24px] leading-[0.9] whitespace-nowrap">
                    Sabão em Pó 1kg
                  </p>
                  <div class="flex gap-2 text-[11px] text-[#90908e] tracking-[-0.02em] leading-[0.9]">
                    <span>5 CX</span>
                    <span>R$ 12</span>
                  </div>
                </div>
              </div>
              <p class="text-[11.4px] text-[#232222] font-medium opacity-60 leading-[0.9]">R$ 60</p>
            </div>
            <div class="grid grid-cols-3 items-center justify-between" data-grid="item-tapioca">
              <div class="border-[0.5px] border-[#573dff] rounded-sm size-[14px] flex items-center justify-center p-1" data-border="item-tapioca">
                <span class="font-mono text-[8px] text-[#90908e] tracking-[-0.16px] leading-normal">C</span>
              </div>
              <div class="flex-1 flex justify-self-center items-center justify-center gap-1.5 px-2" data-color-transition="item-tapioca">
                <StartIcon color="#573dff" size={12} class="shrink-0"/>
                <span class="font-medium text-[11px] text-[#573dff] tracking-[-0.02em] leading-[1.2] whitespace-nowrap">daquela marca</span>
              </div>
              <span class="justify-self-end text-[9px] text-[#573dff] tracking-[-0.18px] leading-[1.2]" data-quantity="item-tapioca">× 5</span>
            </div>
          </div>
        </div>


        <div class="hidden md:flex items-center gap-2 h-7 overflow-visible" data-animate="text-imagem" style="max-height: 0;">
          <p class="text-[12px] text-[#2e2e2e] tracking-[-0.24px] leading-[0.9] " data-animate="text-imagem-p">
            Itens adicionados por imagem
          </p>
          <video
            data-video-appear
            src="/assets/medias/index/how-to/loading-particles.mp4"
            muted playsinline
            class="size-6 mix-blend-darken object-cover video-loading opacity-0"

          ></video>
        </div>

        <!-- Item 4: Manjericão -->
        <div class="hidden md:block opacity-0 overflow-visible" data-animate="item-acucar" style="max-height: 0;">
          <div class="bg-white rounded-xl p-2 flex flex-col gap-1.5">
            <div class="flex items-center justify-between border-b-[0.5px] border-[rgba(0,0,0,0.12)] pb-2">
            <div class="flex gap-2.5 items-center">
              <div class="w-[36px] h-[42px] rounded-md overflow-hidden shrink-0">
                <Image quality={50} width={36} height={42}  loading="lazy" src={Manjericao} alt="Manjericão" class="w-full h-full object-cover" />
              </div>
              <div class="flex flex-col gap-1">
                <p class="text-[12px] text-[#232222] tracking-[-0.24px] leading-[0.9] whitespace-nowrap">
                  Manjericão kg
                </p>
                <div class="flex gap-2 text-[11px] text-[#90908e] tracking-[-0.02em] leading-[0.9]">
                  <span>4 KG</span>
                  <span>R$ 11,50</span>
                </div>
              </div>
            </div>
            <p class="text-[11.4px] text-[#232222] font-medium opacity-60 leading-[0.9]">R$ 253</p>
          </div>
          <div class="grid grid-cols-3 items-center justify-between" data-grid="item-acucar">
            <div class="border-[0.5px] border-[#573dff] rounded-sm size-[14px] flex items-center justify-center p-1" data-border="item-acucar">
              <span class="font-mono text-[8px] text-[#90908e] tracking-[-0.16px] leading-normal">D</span>
            </div>
            <div class="flex-1 justify-self-center flex items-center justify-center gap-1.5 px-2" data-color-transition="item-acucar">
              <StartIcon color="#573dff" size={12} class="shrink-0"/>
              <span class="font-medium text-[11px] text-[#573dff] tracking-[-0.02em] leading-[1.2] whitespace-nowrap">Manjericão comum</span>
            </div>
            <span class="justify-self-end text-[9px] text-[#573dff] tracking-[-0.18px] leading-[1.2]" data-quantity="item-acucar">× 4 KG</span>
          </div>
          </div>
        </div>

        <!-- Item 5: Laranja -->
        <div class="hidden md:block opacity-0 overflow-visible" data-animate="item-hortela" style="max-height: 0;">
          <div class="bg-white rounded-xl p-2 flex flex-col gap-1.5">
            <div class="flex items-center justify-between border-b-[0.5px] border-[rgba(0,0,0,0.12)] pb-2">
            <div class="flex gap-2.5 items-center">
              <div class="w-[36px] h-[42px] rounded-md overflow-hidden shrink-0">
                <Image src={Laranja} alt="Laranja" class="w-full h-full object-cover" />
              </div>
              <div class="flex flex-col gap-1">
                <p class="text-[12px] text-[#232222] tracking-[-0.24px] leading-[0.9] whitespace-nowrap">
                  Laranja kg
                </p>
                <div class="flex gap-2 text-[11px] text-[#90908e] tracking-[-0.02em] leading-[0.9]">
                  <span>5 Sacos</span>
                  <span>R$ 4,50</span>
                </div>
              </div>
            </div>
            <p class="text-[11.4px] text-[#232222] font-medium opacity-60 leading-[0.9]">R$ 20</p>
          </div>
          <div class="grid grid-cols-3 items-center justify-between" data-grid="item-hortela">
            <div class="border-[0.5px] border-[#573dff] rounded-sm size-[14px] flex items-center justify-center p-1" data-border="item-hortela">
              <span class="font-mono text-[8px] text-[#90908e] tracking-[-0.16px] leading-normal">E</span>
            </div>

            <div class="flex-1 justify-self-center flex items-center justify-center gap-1.5 px-2" data-color-transition="item-hortela">
              <StartIcon color="#573dff" size={12} class="shrink-0"/>
              <span class="font-medium text-[11px] text-[#573dff] tracking-[-0.02em] leading-[1.2] whitespace-nowrap">"Laranja p/ suco"</span>
            </div>

            <span class="justify-self-end text-[9px] text-[#573dff] tracking-[-0.18px] leading-[1.2]" data-quantity="item-hortela">× 5 Sacos</span>
          </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import { animate, inView } from "motion";

  const initMessageOrderAnimation = () => {
    const container = document.querySelector("#messages-to-order-container");
    if (!container) return;

    // Variáveis de controle
    let animationTimeouts: number[] = [];
    let isAnimating = false;
    let currentAnimations: any[] = [];
    let eventListeners: Array<{ element: Element, event: string, handler: any }> = [];

    // Detectar se é mobile ou desktop
    const isMobile = window.matchMedia('(max-width: 767px)').matches;

    // Função para obter altura real do elemento
    const getElementHeight = (selector: string): string => {
      const element = container.querySelector(selector);
      if (!element) return "500px";

      // Temporariamente mostrar elemento para medir
      const originalMaxHeight = (element as HTMLElement).style.maxHeight;
      const originalOverflow = (element as HTMLElement).style.overflow;

      (element as HTMLElement).style.maxHeight = "none";
      (element as HTMLElement).style.overflow = "visible";

      const height = element.scrollHeight;

      // Restaurar estado original
      (element as HTMLElement).style.maxHeight = originalMaxHeight;
      (element as HTMLElement).style.overflow = originalOverflow;

      return `${height}px`;
    };

    // Função para criar configuração de animação com altura dinâmica
    const getSlideUpConfig = (selector: string) => ({
      opacity: [0, 1],
      y: [20, 0],
      maxHeight: ["0px", getElementHeight(selector)],
    });

    // Função para criar configuração de animação SEM opacity (apenas maxHeight e y)
    const getSlideUpConfigWithoutOpacity = (selector: string) => ({
      y: [20, 0],
      maxHeight: ["0px", getElementHeight(selector)],
    });

    // Função para atualizar contador de itens
    const updateCounter = (value: number) => {
      const counter = container.querySelector('#order-counter');
      if (counter) counter.textContent = value.toString();
    };

    const duration = 0.8;
    const delay = duration;

    const animationOptions = {
      duration: duration,
      easing: [0.22, 1, 0.36, 1] as any, // easeOutCubic
    };

    // Função para animar transição de cor do texto e StarIcon
    const animateColorTransition = (itemId: string) => {
      const colorTransitionDelay = 0.3; // 300ms delay
      const colorTransitionDuration = 0.5; // 500ms duração

      window.setTimeout(() => {
        const element = container.querySelector(`[data-color-transition="${itemId}"]`);
        const borderElement = container.querySelector(`[data-border="${itemId}"]`);
        const quantityElement = container.querySelector(`[data-quantity="${itemId}"]`);
        const gridElement = container.querySelector(`[data-grid="${itemId}"]`);

        if (!element) return;

        // Animar o span de texto
        const textSpan = element.querySelector('span');
        if (textSpan) {
          const anim = animate(textSpan as Element,
            { color: ['#573dff', '#232222'] },
            { duration: colorTransitionDuration, easing: 'ease-in-out' } as any
          );
          currentAnimations.push(anim);
        }

        // Animar o SVG (StartIcon) - modificar apenas atributos fill/stroke
        const svg = element.querySelector('svg');
        if (svg) {
          const paths = svg.querySelectorAll('path');

          // Adicionar CSS transition aos paths
          paths.forEach((path) => {
            (path as SVGPathElement).style.transition = `fill ${colorTransitionDuration}s ease-in-out, stroke ${colorTransitionDuration}s ease-in-out`;
          });

          // Usar timeout para garantir que a transition foi aplicada pelo browser
          window.setTimeout(() => {
            paths.forEach((path) => {
              const hasFill = path.hasAttribute('fill');
              const hasStroke = path.hasAttribute('stroke');

              // Mudar apenas o atributo (CSS transition vai animar)
              if (hasFill) {
                path.setAttribute('fill', '#90908e');
              }
              if (hasStroke) {
                path.setAttribute('stroke', '#90908e');
              }
            });
          }, 10); // 10ms para garantir que o browser processou a propriedade transition
        }

        // Animar a quantidade (× 12, × 1, etc.)
        if (quantityElement) {
          const anim = animate(quantityElement as Element,
            { color: ['#573dff', '#90908e'] },
            { duration: colorTransitionDuration, easing: 'ease-in-out' } as any
          );
          currentAnimations.push(anim);
        }

        // Animar a borda
        if (borderElement) {
          const anim = animate(borderElement as Element,
            { borderColor: ['#573dff', '#232222'] },
            { duration: colorTransitionDuration, easing: 'ease-in-out' } as any
          );
          currentAnimations.push(anim);
        }

        // Adicionar opacity-60 ao grid após a transição
        if (gridElement) {
          window.setTimeout(() => {
            (gridElement as HTMLElement).style.opacity = '0.6';
          }, colorTransitionDuration * 1000);
        }
      }, colorTransitionDelay * 1000);
    };

    // Função para limpar todos os event listeners rastreados
    const clearEventListeners = () => {
      eventListeners.forEach(({ element, event, handler }) => {
        element.removeEventListener(event, handler);
      });
      eventListeners = [];
    };

    // Função para adicionar event listener rastreado
    const addTrackedEventListener = (element: Element, event: string, handler: any, options?: any) => {
      element.addEventListener(event, handler, options);
      eventListeners.push({ element, event, handler });
    };

    // Função para limpar todos os estilos inline deixados pelo Motion
    const clearAllInlineStyles = () => {
      container.querySelectorAll('[data-animate]').forEach(el => {
        const element = el as HTMLElement;
        const animateKey = element.getAttribute('data-animate');

        // Remover todos os estilos inline do Motion
        // element.style.removeProperty('opacity');
        element.style.removeProperty('transform');
        element.style.removeProperty('max-height');
        element.style.removeProperty('overflow');
        // element.style.removeProperty('transition');

        // Aplicar estado inicial correto baseado no tipo
        if (animateKey === 'panel-conversa') {
          if (window.innerWidth >= 768) {
            element.style.transform = 'translateX(220px)';
          }
          element.style.opacity = '1';
        } else if (animateKey === 'panel-pedido') {
          // Não controlar opacidade - itens internos já controlam
        } else if (animateKey === 'text-imagem') {
          element.style.maxHeight = '0';
          element.style.overflow = 'visible';
          element.style.opacity = '1';
        } else if (animateKey === 'text-imagem-p') {
          element.style.removeProperty('transform');
          // element.style.removeProperty('transition');
          setTimeout(() => {
            element.style.opacity = '1';
          }, 1000);
          // element.style.opacity = '1'; // Forçar invisível no reset
        } else if (animateKey === 'video-loading') {
          element.style.opacity = '0';
        } else {
          element.style.opacity = '0';
          element.style.maxHeight = '0';
          element.style.overflow = 'visible';
        }
      });
    };

    // Função para resetar cores dos elementos
    const resetColorTransitions = () => {
      container.querySelectorAll('[data-color-transition]').forEach(el => {
        const itemId = el.getAttribute('data-color-transition');
        if (!itemId) return;

        // Reset texto
        const textSpan = el.querySelector('span');
        if (textSpan) {
          (textSpan as HTMLElement).style.color = '#573dff';
        }

        // Reset SVG
        const svg = el.querySelector('svg');
        if (svg) {
          const paths = svg.querySelectorAll('path');
          paths.forEach(path => {
            (path as SVGElement).style.transition = '';
            (path as SVGElement).style.fill = '';
            (path as SVGElement).style.stroke = '';

            if (path.hasAttribute('fill')) {
              path.setAttribute('fill', '#573dff');
            }
            if (path.hasAttribute('stroke')) {
              path.setAttribute('stroke', '#573dff');
            }
          });
        }

        // Reset quantidade
        const quantityEl = container.querySelector(`[data-quantity="${itemId}"]`) as HTMLElement;
        if (quantityEl) {
          quantityEl.style.color = '#573dff';
        }

        // Reset borda
        const borderEl = container.querySelector(`[data-border="${itemId}"]`) as HTMLElement;
        if (borderEl) {
          borderEl.style.borderColor = '#573dff';
        }

        // Reset opacity do grid
        const gridEl = container.querySelector(`[data-grid="${itemId}"]`) as HTMLElement;
        if (gridEl) {
          gridEl.style.opacity = '1';
        }
      });
    };

    // Função para resetar vídeo completamente
    const resetVideo = () => {
      const video = container.querySelector('[data-video-appear]') as HTMLVideoElement;
      if (video) {
        video.pause();
        video.currentTime = 0;

        // Clonar vídeo para remover TODOS os event listeners
        const newVideo = video.cloneNode(true) as HTMLVideoElement;
        video.parentNode?.replaceChild(newVideo, video);

        newVideo.style.transition = '';
        newVideo.style.opacity = '0';
        newVideo.playbackRate = 1;
        newVideo.currentTime = 0;
      }
    };

    // Função para resetar vídeo de background
    const resetBackgroundVideo = () => {
      const bgVideo = container.querySelector('video:not([data-video-appear])') as HTMLVideoElement;
      if (bgVideo) {
        bgVideo.currentTime = 0;
        bgVideo.play().catch(() => {});
      }
    };

    // Função consolidada para reset completo
    const fullReset = () => {
      // 1. Cancelar todos timeouts pendentes
      animationTimeouts.forEach(id => window.clearTimeout(id));
      animationTimeouts = [];

      // 2. Parar animações em andamento
      currentAnimations.forEach(anim => {
        if (anim && typeof anim.stop === 'function') {
          anim.stop();
        }
      });
      currentAnimations = [];

      // 3. Limpar event listeners
      clearEventListeners();

      // 4. Aguardar múltiplos frames para Motion liberar completamente
      requestAnimationFrame(() => {
        requestAnimationFrame(() => {
          requestAnimationFrame(() => {
            // 5. Limpar estilos inline
            clearAllInlineStyles();

            // 6. Resetar cores
            resetColorTransitions();

            // 7. Resetar vídeos
            resetVideo();
            resetBackgroundVideo();

            // 8. Resetar contador
            updateCounter(0);

            // 9. Marcar como não animando
            isAnimating = false;
          });
        });
      });
    };

    // Função para parar e resetar animação completamente
    const stopAndResetAnimation = () => {
      fullReset();
    };

    // Função que executa sequência completa de animações
    const runAnimationSequence = () => {
      if (isAnimating) return; // Prevenir múltiplas animações simultâneas
      isAnimating = true;
      // Primeiro aguardar 5 segundos, depois fazer fade-out
      const timeoutId = window.setTimeout(() => {
        fadeOutAndReset();
      }, 5000);
      animationTimeouts.push(timeoutId);
    };

    const fadeOutAndReset = () => {
      const fadeOutDuration = 0.5;

      const visibleElements = Array.from(container.querySelectorAll('[data-animate]')).filter(el => {
        const element = el as HTMLElement;
        const animateKey = element.getAttribute('data-animate');

        // Excluir painéis, container text-imagem, texto e vídeo do fade out
        // - text-imagem: nunca anima opacity, apenas seus filhos
        // - text-imagem-p: controlado manualmente, não deve fazer fade-out geral
        // - video-loading: tem fade-out manual específico
        if (animateKey === 'panel-conversa' || animateKey === 'panel-pedido' || animateKey === 'text-imagem'  || animateKey === 'video-loading') {
          return false;
        }

        return element.style.opacity !== '0';
      });

      // Se houver elementos visíveis, fazer fade-out
      if (visibleElements.length > 0) {
        // Fazer fade-out de todos os elementos simultaneamente
        const fadeOutPromises = visibleElements.map(el => {
          const anim = animate(el as Element, { opacity: 0 }, { duration: fadeOutDuration, easing: 'ease-out' } as any);
          currentAnimations.push(anim);
          return anim;
        });

        // Aguardar todos os fade-outs completarem
        Promise.all(fadeOutPromises).then(() => {
          // Após fade-out, resetar completamente
          resetAndStartAnimation();
        });
      } else {
        // Se não houver elementos visíveis (primeira execução), começar direto
        resetAndStartAnimation();
      }
    };

    const resetAndStartAnimation = () => {
      // Cancelar todos timeouts e animações
      animationTimeouts.forEach(id => window.clearTimeout(id));
      animationTimeouts = [];

      currentAnimations.forEach(anim => {
        if (anim && typeof anim.stop === 'function') {
          anim.stop();
        }
      });
      currentAnimations = [];

      // Limpar event listeners
      clearEventListeners();

      // Aguardar múltiplos frames para Motion liberar
      requestAnimationFrame(() => {
        requestAnimationFrame(() => {
          requestAnimationFrame(() => {
            // Limpar estilos inline
            clearAllInlineStyles();

            // Resetar cores
            resetColorTransitions();

            // Resetar vídeos
            resetVideo();
            resetBackgroundVideo();

            // Resetar contador
            updateCounter(0);

            // Marcar como não animando
            isAnimating = false;

            // Iniciar animações de entrada imediatamente
            startEntryAnimations();
          });
        });
      });
    };

    const startEntryAnimations = () => {
      if (isMobile) {
        // Sequência mobile (apenas 3 mensagens e 2 itens)

        const panelConversa = container.querySelector('[data-animate="panel-conversa"]');
        if (panelConversa) {
          currentAnimations.push(
            animate(panelConversa as Element, {
              opacity: [0, 1],
            }, {
              ...animationOptions,
              delay: delay ,
            })
          );
        }

        currentAnimations.push(
          animate('[data-animate="header-conversa"]', getSlideUpConfig('[data-animate="header-conversa"]'), {
            ...animationOptions,
            delay: delay,
          })
        );

        currentAnimations.push(
          animate('[data-animate="msg-1"]', getSlideUpConfig('[data-animate="msg-1"]'), {
            ...animationOptions,
            delay: delay * 2,
          })
        );

        currentAnimations.push(
          animate('[data-animate="msg-2"]', getSlideUpConfig('[data-animate="msg-2"]'), {
            ...animationOptions,
            delay: delay * 3,
          })
        );

        // Painel Pedido - Direita (opacidade controlada pelos itens internos)
        currentAnimations.push(
          animate('[data-animate="header-pedido"]', getSlideUpConfig('[data-animate="header-pedido"]'), {
            ...animationOptions,
            delay: delay * 4,
          })
        );

        // Items com atualização do contador (apenas 2 itens em mobile)
        currentAnimations.push(
          animate('[data-animate="item-arroz"]', getSlideUpConfig('[data-animate="item-arroz"]'), {
            ...animationOptions,
            delay: delay * 5,
          }).then(() => {
            updateCounter(1);
            animateColorTransition('item-arroz');
          })
        );

        currentAnimations.push(
          animate('[data-animate="msg-3"]', getSlideUpConfig('[data-animate="msg-3"]'), {
            ...animationOptions,
            delay: delay * 6,
          })
        );

        currentAnimations.push(
          animate('[data-animate="item-mussarela"]', getSlideUpConfig('[data-animate="item-mussarela"]'), {
            ...animationOptions,
            delay: delay * 7,
          }).then(() => {
            updateCounter(2);
            animateColorTransition('item-mussarela');
          })
        );

        // Calcular tempo total para mobile (última animação termina em: delay * 7 + duration)
        const totalTime = (delay * 7 + duration) * 1000;
        const timeoutId = window.setTimeout(() => runAnimationSequence(), totalTime);
        animationTimeouts.push(timeoutId);
      } else {
        // Sequência desktop (todas as mensagens e itens)
        currentAnimations.push(
          animate('[data-animate="header-conversa"]', getSlideUpConfig('[data-animate="header-conversa"]'), {
            ...animationOptions,
            delay: delay,
          })
        );

        currentAnimations.push(
          animate('[data-animate="msg-1"]', getSlideUpConfig('[data-animate="msg-1"]'), {
            ...animationOptions,
            delay: delay * 2,
          })
        );

        currentAnimations.push(
          animate('[data-animate="msg-2"]', getSlideUpConfig('[data-animate="msg-2"]'), {
            ...animationOptions,
            delay: delay * 3,
          })
        );

        // Animar painel de conversa para posição final (desktop)
        const panelConversaDesktop = container.querySelector('[data-animate="panel-conversa"]');
        if (panelConversaDesktop) {
          currentAnimations.push(
            animate(panelConversaDesktop as Element, {
              x: [220, 0],
            }, {
              ...animationOptions,
              delay: delay * 4,
            })
          );
        }

        // Painel Pedido - Direita (aparece após painel conversa terminar de deslizar)
        currentAnimations.push(
          animate('[data-animate="header-pedido"]', getSlideUpConfig('[data-animate="header-pedido"]'), {
            ...animationOptions,
            delay: delay * 5,
          })
        );

        // Items com atualização do contador
        currentAnimations.push(
          animate('[data-animate="item-arroz"]', getSlideUpConfig('[data-animate="item-arroz"]'), {
            ...animationOptions,
            delay: delay * 6,
          }).then(() => {
            updateCounter(1);
            animateColorTransition('item-arroz');
          })
        );

        currentAnimations.push(
          animate('[data-animate="msg-3"]', getSlideUpConfig('[data-animate="msg-3"]'), {
            ...animationOptions,
            delay: delay * 7,
          })
        );

        currentAnimations.push(
          animate('[data-animate="item-mussarela"]', getSlideUpConfig('[data-animate="item-mussarela"]'), {
            ...animationOptions,
            delay: delay * 8,
          }).then(() => {
            updateCounter(2);
            animateColorTransition('item-mussarela');
          })
        );

        // Mensagem vendedor
        currentAnimations.push(
          animate('[data-animate="msg-seller"]', getSlideUpConfig('[data-animate="msg-seller"]'), {
            ...animationOptions,
            delay: delay * 9,
          })
        );

        // Mensagem comprador tapioca
        currentAnimations.push(
          animate('[data-animate="msg-customer-tapioca"]', getSlideUpConfig('[data-animate="msg-customer-tapioca"]'), {
            ...animationOptions,
            delay: delay * 10,
          })
        );

        // Item tapioca no pedido
        currentAnimations.push(
          animate('[data-animate="item-tapioca"]', getSlideUpConfig('[data-animate="item-tapioca"]'), {
            ...animationOptions,
            delay: delay * 11,
          }).then(() => {
            updateCounter(3);
            animateColorTransition('item-tapioca');
          })
        );

        // Mensagem com imagem
        currentAnimations.push(
          animate('[data-animate="msg-image"]', getSlideUpConfig('[data-animate="msg-image"]'), {
            ...animationOptions,
            delay: delay * 12,
          })
        );

        // Container "Itens adicionados por imagem" (sem opacity)
        currentAnimations.push(
          animate('[data-animate="text-imagem"]', getSlideUpConfigWithoutOpacity('[data-animate="text-imagem"]'), {
            ...animationOptions,
            delay: delay * 13,
          })
        );

        // Texto "Itens adicionados por imagem" (apenas opacity)
        currentAnimations.push(
          animate('[data-animate="text-imagem-p"]', {
            opacity: [0, 1],
          }, {
            ...animationOptions,
            delay: delay * 13,
          }).then(() => {
            const video = container.querySelector('[data-video-appear]') as HTMLVideoElement;
            if (video) {
              video.playbackRate = 2; // Reproduzir em 2x
              video.style.transition = 'opacity 0.5s ease-in-out';
              video.style.opacity = '1';

              // Handler para quando vídeo terminar
              const handleVideoEnded = () => {
                // Item açúcar - aparece imediatamente
                const animAcucar = animate('[data-animate="item-acucar"]', getSlideUpConfig('[data-animate="item-acucar"]'), {
                  ...animationOptions,
                  delay: 0,
                }).then(() => {
                  updateCounter(4);
                  animateColorTransition('item-acucar');
                });
                currentAnimations.push(animAcucar);

                // Item hortelã - aparece logo em seguida
                const animHortela = animate('[data-animate="item-hortela"]', getSlideUpConfig('[data-animate="item-hortela"]'), {
                  ...animationOptions,
                  delay: delay, // 0.8s após açúcar
                }).then(() => {
                  updateCounter(5);
                  animateColorTransition('item-hortela');
                  // Fazer fade-out do vídeo
                  video.style.opacity = '0';
                });
                currentAnimations.push(animHortela);
              };

              // Adicionar listener rastreado
              addTrackedEventListener(video, 'ended', handleVideoEnded, { once: true });

              // Iniciar vídeo (já que removemos autoplay)
              video.currentTime = 0; // Resetar para início
              video.play().catch(() => {}); // Silenciar erros de autoplay
            }
          })
        );

        // Fade out do vídeo de loading (antes do fadeOut geral para evitar problemas com mix-blend-darken)


        // Calcular tempo total para desktop
        // delay * 13 (texto imagem) + ~3s (vídeo em 2x) + delay (açúcar) + delay (hortelã) + duration (hortelã)
        const totalTime = (delay * 13 + 3 + delay + delay + duration) * 1000;
        const timeoutId = window.setTimeout(() => runAnimationSequence(), totalTime);
        animationTimeouts.push(timeoutId);
      }
    };

    // Controlar pausa/play dos vídeos baseado na visibilidade
    function initVideoVisibilityControl() {
      if (!container) return;

      const backgroundVideo = container.querySelector('video:not([data-video-appear])') as HTMLVideoElement | null;

      inView(
        container,
        () => {
          // Entrou no viewport - play nos vídeos
          if (backgroundVideo) {
            backgroundVideo.play().catch(() => {
              // Ignorar erros de autoplay
            });
          }
     
          // Retornar callback para quando sair do viewport
          return () => {
            // Saiu do viewport - pausar vídeos
            if (backgroundVideo) {
              backgroundVideo.pause();
            }
          };
        },
        { amount: 0.2 }
      );
    }

    // Detectar quando componente entra no viewport e iniciar loop
    inView(
      container,
      () => {
        // Entrou no viewport - resetar completamente e começar do zero
        stopAndResetAnimation();
        resetAndStartAnimation();

        // Retornar callback para quando sair do viewport
        return () => {
          // Saiu do viewport - parar e resetar
          stopAndResetAnimation();
        };
      },
      { amount: 0.2 } // Inicia quando 20% do componente está visível
    );

    // Inicializar controle de visibilidade dos vídeos
    initVideoVisibilityControl();

    // Listener para mudanças de aba
    document.addEventListener("howToSelectorChanged", (e: Event) => {
      const customEvent = e as CustomEvent;
      const { activeSelector } = customEvent.detail;

      if (activeSelector === 'conversa') {
        // Aba conversa ativada - resetar completamente e começar do zero
        stopAndResetAnimation();
        // Pequeno delay para garantir que o reset foi aplicado antes de reiniciar
        window.setTimeout(() => {
          resetAndStartAnimation();
        }, 50);
      } else {
        // Outra aba ativada - parar animação
        stopAndResetAnimation();
      }
    });
  };

  // Inicializar quando o DOM estiver pronto
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initMessageOrderAnimation);
  } else {
    initMessageOrderAnimation();
  }


</script>

