---
import TabSelector from "./tab-selector.astro";
import MessagesToOrder from "./messages-to-order.astro";
import audioImgMobile from "@/assets/how-to/audio-mobile.png";
import audioImgDesktop from "@/assets/how-to/audio-desktop.png";
---

<section
  id="how-to"
  class="py-28 flex flex-col items-center justify-center gap-8 px-4"
>
  <div class="space-y-5">
    <h2
      class="text-[37px] md:text-[58px] max-w-[28ch] text-center font-normal leading-none text-[#383838] mb-8 tracking-tight"
    >
      Chega de lançar pedidos manualmente
    </h2>

    <p
      class="text-sm md:text-[17px] text-center leading-snug tracking-[-0.02em] max-w-[66ch] mx-auto"
    >
      A Sharpi captura cada pedido — por WhatsApp ou e-mail — e registra tudo
      direto no seu ERP, drasticamente reduzindo o tempo de digitação,
      retrabalho e erros.
    </p>
  </div>

  <div class="space-y-3 flex items-center justify-center flex-col w-full">
    <TabSelector />

    <div
      id="tab-content"
      class="relative flex w-full max-w-7xl aspect-[382/604] md:aspect-[1354/744] rounded-3xl bg-[#F5F5F5] shadow-[0px_0px_12px_0px_rgba(0,0,0,0.12)]"
    >
      <div
        id="tab-conversa"
        class="absolute z-0 w-full h-full inset-0 rounded-[20px] transition-opacity duration-300"
        data-tab-content="conversa"
      >
        <MessagesToOrder />
      </div>

      <div
        id="tab-audio"
        class="absolute z-0 w-full h-full inset-0 rounded-[20px] opacity-0 transition-opacity duration-300"
        data-tab-content="audio"
      >
        <picture>
          <source
            media="(min-width: 768px)"
            srcset={audioImgDesktop.src}
          />
          <source
            media="(max-width: 767px)"
            srcset={audioImgMobile.src}
          />
          <img
            class="w-full h-full object-cover rounded-[20px]"
            src={audioImgDesktop.src}
            alt="Interface de áudio da Sharpi"
          />
        </picture>
      </div>

      <div
        id="tab-files"
        class="absolute z-0 w-full h-full inset-0 rounded-[20px] opacity-0 transition-opacity duration-300"
        data-tab-content="files"
      >
        <video
          class="w-full h-full object-cover rounded-[20px]"
          autoplay
          loop
          muted
          playsinline
        >
          <source
            media="(max-width: 767px)"
            src="/assets/medias/index/how-to/files-mobile.mp4"
          />
          <source
            media="(min-width: 768px)"
            src="/assets/medias/index/how-to/files-desktop.mp4"
          />
        </video>
      </div>
    </div>
  </div>
</section>

<script>
  import { inView } from "motion";

  const initTabContent = () => {
    const switchTabContent = (activeTab: string) => {
      const allTabContents =
        document.querySelectorAll<HTMLElement>("[data-tab-content]");

      allTabContents.forEach((content) => {
        content.style.opacity = "0";
        content.style.pointerEvents = "none";

        // Pausar vídeos quando não estão visíveis
        const video = content.querySelector("video") as HTMLVideoElement;
        if (video) {
          video.pause();
        }
      });

      // Mostrar o conteúdo da tab ativa
      const activeContent = document.querySelector<HTMLElement>(
        `[data-tab-content="${activeTab}"]`
      );

      if (activeContent) {
        activeContent.style.opacity = "1";
        activeContent.style.pointerEvents = "auto";

        // Reproduzir vídeo se existir
        const video = activeContent.querySelector("video") as HTMLVideoElement;
        if (video) {
          video.currentTime = 0; // Resetar vídeo para o início
          video.play().catch(() => {
            // Ignorar erro se autoplay falhar
          });
        }
      }
    };

    const handleResize = () => {
      // Atualizar source do vídeo de files baseado no tamanho da tela
      const filesVideo =
        document.querySelector<HTMLVideoElement>("#tab-files video");

      if (filesVideo) {
        const isMobile = window.innerWidth < 768;
        const newSrc = isMobile
          ? "/assets/medias/index/how-to/files-mobile.mp4"
          : "/assets/medias/index/how-to/files-desktop.mp4";

        if (!filesVideo.src.endsWith(newSrc)) {
          filesVideo.src = newSrc;
          filesVideo.load();
        }
      }
    };

    document.addEventListener("howToSelectorChanged", (e: Event) => {
      const customEvent = e as CustomEvent;
      const { activeSelector } = customEvent.detail;
      switchTabContent(activeSelector);
    });

    window.addEventListener("resize", handleResize);

    
    const initialActiveSelector =
      document
        .querySelector('[data-active="true"]')
        ?.getAttribute("data-selector-button") || "conversa";

    switchTabContent(initialActiveSelector);
    handleResize();

    
    const tabFilesElement = document.querySelector<HTMLElement>("#tab-files");
    if (tabFilesElement) {
      inView(
        tabFilesElement,
        () => {
          
          const video = tabFilesElement.querySelector("video") as HTMLVideoElement;
          if (video && tabFilesElement.style.opacity === "1") {
            
            video.currentTime = 0;
            video.play().catch(() => {
              
            });
          }

          
          return () => {
          
            const video = tabFilesElement.querySelector("video") as HTMLVideoElement;
            if (video) {
              video.pause();
            }
          };
        },
        { amount: 0.2 }
      );
    }
  };

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initTabContent);
  } else {
    initTabContent();
  }
</script>
